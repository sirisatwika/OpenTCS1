image: adoptopenjdk:13-jdk-hotspot

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  DO_DEPLOY_PRIVATE:
    value: "false"
    description: "Whether ('true') or not ('false') to deploy artifacts to private (GitLab) repository."
  DO_DEPLOY_PUBLIC:
    value: "false"
    description: "Whether ('true') or not ('false') to deploy artifacts to public repository, e.g. for release builds."
  NO_BUILD_NUMBER:
    value: "false"
    description: "Whether ('true') or not ('false') to exclude the build number in the artifacts' version number, e.g. for release builds."
  SIGNING_KEY:
    value: ""
    description: "The key to use for signing artifacts."
  SIGNING_PASSWORD:
    value: ""
    description: "The password to use for signing artifacts."
  DEPLOY_REPO_PUBLIC_URL:
    value: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
    description: "URL of the public repository to deploy artifacts to."
  DEPLOY_REPO_PUBLIC_USERNAME:
    value: ""
    description: "User name for logging in with the public repository."
  DEPLOY_REPO_PUBLIC_PASSWORD:
    value: ""
    description: "Password for logging in with the public repository."

before_script:
  # Put GRADLE_USER_HOME into the cache directory so the wrapper is not
  # re-downloaded for every job.
  - export GRADLE_USER_HOME=/cache/.gradle

cache:
  key: ${CI_COMMIT_REF_SLUG}

stages:
  - build
  - test

build:
  stage: build
  tags:
    - opentcs-runner
  script:
    - echo "CI_PIPELINE_IID is $CI_PIPELINE_IID"
    - echo "DO_DEPLOY_PRIVATE is $DO_DEPLOY_PRIVATE"
    - echo "DO_DEPLOY_PUBLIC is $DO_DEPLOY_PUBLIC"
    - echo "NO_BUILD_NUMBER is $NO_BUILD_NUMBER"
    - echo "DEPLOY_REPO_PUBLIC_URL is $DEPLOY_REPO_PUBLIC_URL"
    - echo "DEPLOY_REPO_PUBLIC_USERNAME is $DEPLOY_REPO_PUBLIC_USERNAME"
    - ./gradlew clean build jacocoLogAggregatedCoverage publish
        -PDO_DEPLOY_PRIVATE="$DO_DEPLOY_PRIVATE"
        -PDO_DEPLOY_PUBLIC="$DO_DEPLOY_PUBLIC"
        -PNO_BUILD_NUMBER="$NO_BUILD_NUMBER"
        -PSIGNING_KEY="$SIGNING_KEY"
        -PSIGNING_PASSWORD="$SIGNING_PASSWORD"
        -PDEPLOY_REPO_PUBLIC_URL="$DEPLOY_REPO_PUBLIC_URL"
        -PDEPLOY_REPO_PUBLIC_USERNAME="$DEPLOY_REPO_PUBLIC_USERNAME"
        -PDEPLOY_REPO_PUBLIC_PASSWORD="$DEPLOY_REPO_PUBLIC_PASSWORD"
  coverage: '/Branch Coverage: ([0-9.]+)%/'
  artifacts:
    paths:
      - build/distributions/*.zip
      - openTCS-*/build/reports/checkstyle/*.xml
      - openTCS-*/build/test-results/test/TEST-*.xml
    reports:
      junit: openTCS-*/build/test-results/test/TEST-*.xml
    when: always
    expire_in: 1 week

ensure_tests_passed:
  stage: test
  tags:
    - opentcs-runner
  variables:
    CONCATENATED_REPORT_FILE: concatenated-test-reports.xml
  script:
    - echo "Checking test reports for failures..."
    - rm -f $CONCATENATED_REPORT_FILE
    - find . -name "TEST-*.xml" -exec cat '{}' + >> $CONCATENATED_REPORT_FILE
    # There are examples of simply using 'grep -L "<failure", but the
    # grep we have here doesn't provide the expected exit status with
    # that, so we stick to plain grep and an if-else clause.
    - 'if grep "<failure" $CONCATENATED_REPORT_FILE ; then
        echo "There are failed tests - failing this job...";
        false;
      else
        echo "No failed tests here.";
        true;
      fi'

code_quality:
  stage: test
  tags:
    - opentcs-runner
  variables:
    CODE_CLIMATE_FILE: gl-code-quality-report.json
  script:
    - echo "Installing dependencies required for violations-command-line..."
    - apt update && apt upgrade -y
    - apt install -y nodejs npm
    - npm install -g npx
    - echo "Converting CheckStyle reports to CodeClimate report..."
    - npx violations-command-line@1.21.0 -cc $CODE_CLIMATE_FILE -print-violations false -diff-print-violations true -v "CHECKSTYLE" "." ".*checkstyle/.*\.xml$" "Checkstyle"
    - sed -i.bak -e "s,$CI_PROJECT_DIR/,,g" $CODE_CLIMATE_FILE
  artifacts:
    reports:
      codequality: $CODE_CLIMATE_FILE
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"' # Run code quality job in merge request pipelines
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'      # Run code quality job in pipelines on the master branch (but not in other branch pipelines)
    - if: '$CI_COMMIT_TAG'                               # Run code quality job in pipelines for tags
